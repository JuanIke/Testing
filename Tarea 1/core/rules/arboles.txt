------------Código 1A --------------
 
Module(
    body=[
        FunctionDef(
            name='test',
            args=arguments(
                posonlyargs=[],
                args=[
                    arg(arg='self')],
                kwonlyargs=[],
                kw_defaults=[],
                defaults=[]),
            body=[
                Assign(
                    targets=[
                        Name(id='x', ctx=Store())],
                    value=Constant(value=3)), 
                Expr(
                    value=Call(
                        func=Attribute(
                            value=Name(id='self', ctx=Load()),
                            attr='assertEquals',
                            ctx=Load()),
                        args=[
                            Name(id='x', ctx=Load()),
                            Constant(value=2)],
                        keywords=[]))],
            decorator_list=[])],
    type_ignores=[])
 
------------Código 1D --------------
 
Module(
   body=[
      FunctionDef(
         name='test',
         args=arguments(
            posonlyargs=[],
            args=[
               arg(arg='self')],
            kwonlyargs=[],
            kw_defaults=[],
            defaults=[]),
         body=[
            Expr(
               value=Call(
                  func=Attribute(
                     value=Name(id='self', ctx=Load()),
                     attr='assertEquals',
                     ctx=Load()),
                  args=[
                     Constant(value=3),
                     Constant(value=2)],
                  keywords=[]))],
         decorator_list=[])],
   type_ignores=[])
 
-----------Código 2A -----------
 
Module(
   body=[
      FunctionDef(
         name='test',
         args=arguments(
            posonlyargs=[],
            args=[
               arg(arg='self')],
            kwonlyargs=[],
            kw_defaults=[],
            defaults=[]),
         body=[
            Assign(
               targets=[
                  Name(id='x', ctx=Store())],
               value=Call(
                  func=Name(id='complex_method', ctx=Load()),
                  args=[],
                  keywords=[])),
            Expr(
               value=Call(
                  func=Attribute(
                     value=Name(id='self', ctx=Load()),
                     attr='assertEquals',
                     ctx=Load()),
                  args=[
                     Name(id='x', ctx=Load()),
                     Constant(value=2)],
                  keywords=[]))],
         decorator_list=[])],
   type_ignores=[])
 
-----------Código 2D -----------
 
Module(
   body=[
      FunctionDef(
         name='test',
         args=arguments(
            posonlyargs=[],
            args=[
               arg(arg='self')],
            kwonlyargs=[],
            kw_defaults=[],
            defaults=[]),
         body=[
            Expr(
               value=Call(
                  func=Attribute(
                     value=Name(id='self', ctx=Load()),
                     attr='assertEquals',
                     ctx=Load()),
                  args=[
                     Call(
                        func=Name(id='complex_method', ctx=Load()),
                        args=[],
                        keywords=[]),
                     Constant(value=2)],
                  keywords=[]))],
         decorator_list=[])],
   type_ignores=[])
 
-----------Código 3A -----------
 
Module(
   body=[
      FunctionDef(
         name='test',
         args=arguments(
            posonlyargs=[],
            args=[
               arg(arg='self')],
            kwonlyargs=[],
            kw_defaults=[],
            defaults=[]),
         body=[
            Assign(
               targets=[
                  Name(id='x', ctx=Store())],
               value=Call(
                  func=Name(id='complex_method', ctx=Load()),
                  args=[],
                  keywords=[])),
            Assign(
               targets=[
                  Name(id='y', ctx=Store())],
               value=BinOp(
                  left=Name(id='x', ctx=Load()),
                  op=Add(),
                  right=Constant(value=2))),
            Expr(
               value=Call(
                  func=Attribute(
                     value=Name(id='self', ctx=Load()),
                     attr='assertEquals',
                     ctx=Load()),
                  args=[
                     Name(id='y', ctx=Load()),
                     Constant(value=2)],
                  keywords=[]))],
         decorator_list=[])],
   type_ignores=[])
 
-----------Código 3D -----------
 
Module(
   body=[
      FunctionDef(
         name='test',
         args=arguments(
            posonlyargs=[],
            args=[
               arg(arg='self')],
            kwonlyargs=[],
            kw_defaults=[],
            defaults=[]),
         body=[
            Expr(
               value=Call(
                  func=Attribute(
                     value=Name(id='self', ctx=Load()),
                     attr='assertEquals',
                     ctx=Load()),
                  args=[
                     BinOp(
                        left=Call(
                           func=Name(id='complex_method', ctx=Load()),
                           args=[],
                           keywords=[]),
                        op=Add(),
                        right=Constant(value=2)),
                     Constant(value=2)],
                  keywords=[]))],
         decorator_list=[])],
   type_ignores=[])
 
-----------Código 4A -----------
 
Module(
   body=[
      FunctionDef(
         name='test',
         args=arguments(
            posonlyargs=[],
            args=[
               arg(arg='self')],
            kwonlyargs=[],
            kw_defaults=[],
            defaults=[]),
         body=[
            Assign(
               targets=[
                  Name(id='x', ctx=Store())],
               value=Call(
                  func=Name(id='complex_method', ctx=Load()),
                  args=[],
                  keywords=[])),
            Assign(
               targets=[
                  Name(id='y', ctx=Store())],
               value=BinOp(
                  left=Name(id='x', ctx=Load()),
                  op=Add(),
                  right=Constant(value=2))),
            Assign(
               targets=[
                  Name(id='z', ctx=Store())],
               value=BinOp(
                  left=Name(id='x', ctx=Load()),
                  op=Add(),
                  right=Name(id='y', ctx=Load()))),
            Expr(
               value=Call(
                  func=Attribute(
                     value=Name(id='self', ctx=Load()),
                     attr='assertEquals',
                     ctx=Load()),
                  args=[
                     Name(id='z', ctx=Load()),
                     Constant(value=2)],
                  keywords=[]))],
         decorator_list=[])],
   type_ignores=[])
 
-----------Código 4D -----------
 
Module(
   body=[
      FunctionDef(
         name='test',
         args=arguments(
            posonlyargs=[],
            args=[
               arg(arg='self')],
            kwonlyargs=[],
            kw_defaults=[],
            defaults=[]),
         body=[
            Assign(
               targets=[
                  Name(id='x', ctx=Store())],
               value=Call(
                  func=Name(id='complex_method', ctx=Load()),
                  args=[],
                  keywords=[])),
            Expr(
               value=Call(
                  func=Attribute(
                     value=Name(id='self', ctx=Load()),
                     attr='assertEquals',
                     ctx=Load()),
                  args=[
                     BinOp(
                        left=Name(id='x', ctx=Load()),
                        op=Add(),
                        right=BinOp(
                           left=Name(id='x', ctx=Load()),
                           op=Add(),
                           right=Constant(value=2))),
                     Constant(value=2)],
                  keywords=[]))],
         decorator_list=[])],
   type_ignores=[])